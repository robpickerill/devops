#+Title: Blue Green Deployment of Services
#+Author: Yogesh Agrawal
#+Email: yogeshiiith@gmail.com
#+Date: <2017-01-10 Tue>

* Introduction
  Blue Green Deployment of services.

* Blue/Green Deployment Methodology
  - Blue/Green deployment is a technique for releasing applications by
    shifting traffic between two identical environments running
    different versions of the application. Blue/Green deployments
    provide near zero-downtime relase and rollback capabilities.

  - After the green environment is ready and tested, production
    traffic is redirected from blue to green. If any problems are
    identified, we can roll back by reverting traffic back to the blue
    environment.

    Diagram-1:
    [[./diagrams/blue-green-deployment.jpg]]

  - Blue/Green deployment isn't a new concept, we don't commonly see
    it used in traditional, on-premises hosted environment due to the
    cost and effort required to provision additional resources.

** Benefits of Blue/Green
   - It ensures spinning up a parallel green environment, does not
     affect resources and underpinning your blue environment.

   - After we deploy the green environment we have the opportunity to
     validate it. We can do that with the test traffic before sending
     production traffic to the green environment, or by using a very
     small fraction of production traffic, to better reflect real user
     traffic. This is called *canary analysis* or *canary testing*. If
     we discover the green environment is not operating as expected,
     there is no impact on the blue environment. We can route traffic
     back to it, minimizing impaired operation or downtime, and
     limiting the blast radius of impact.

   - Once the deployment succeeds, we decommission the blue
     environment and stop paying for the resources it was using.

** Factors Affecting the deployment
   |--------------------------+--------------------------------|
   | *Factors                 | Criteria*                      |
   |--------------------------+--------------------------------|
   | Application Architecture | Dependencies                   |
   |--------------------------+--------------------------------|
   | Organizational           | Speed and number of iterations |
   |--------------------------+--------------------------------|
   | Risk and complexity      | Impact of failed radius        |
   |--------------------------+--------------------------------|
   | People                   | Expertise                      |
   |--------------------------+--------------------------------|
   | Process                  | Testing/QA                     |
   |--------------------------+--------------------------------|
   | Cost                     | Operating budget               |
   |--------------------------+--------------------------------|

* AWS Tools and Services Enabling Blue/Green Deployments
** Amazon Route 53
   DNS is a classic approach to blue/green deployments, allowing
   administrators to direct traffic by simply updating DNS records in
   the hosted zone. 
   
   Also, time to live (TTL) can be adjusted for resource records, a
   shorter TTL allows record changes to propogate faster to clients.

** Elastic Load Balancing
   ELB distributes incoming application traffic across designated EC2
   instances. ELB scales in response to incoming requests, performs
   health checking against EC2 resources, and naturally integrates
   with other AWS tools, such as auto scaling.
** Auto Scaling
   Auto Scaling helps maintain application availability and lets
   customers scale EC2 capacity up or down automatically according to
   defined conditions. The templates used to launch EC2 instances in
   an auto scaling group are called launch configurations. We can
   attach different versions of auto scaling group to enable
   blue/green deployment. We can also configure Auto Scaling for use
   with an Elastic Load Balancing load balancer. In this configuration
   ELB balances the traffic across the EC2 instances running in an
   Auto Scaling group.

   Auto scaling also allows instances to be placed in a Standby state,
   instead of termination, which helps quick rollback when required.

** AWS Elastic Beanstalk
   Elastic Beanstalk supports Auto Scaling and Elastic Load Balancing,
   both of which enable blue/green deployment. Elastic Beanstalk makes
   it easy to run multiple versions of application and provides
   capabilities to swap the environment URLs, facilitating blue/gree
   deployment.

* Techniques
** Update DNS routing
   DNS is the mechanism for switching traffic from the blue
   environment to the green and vice versa, if rollback is necessary.

   This technique applies to environments that are:
   - Single instances, with a public or Elastic IP address
   - Group of instances behind an ELB
   - Instances in an Auto Scaling group with an ELB as the front end
   - Elastic Beanstalk environment

   We can shift traffic all at once or we can do a weighted
   distribution. With Route53 we can define a percentage of traffic to
   go to the green environment and gradually update the weights until
   the green environment carries the full production traffic. A
   weighted distribution provides the ability to perform canary
   analysis where a small percentage of production traffic is
   introduced to a new environment.

   - Diagram-2:
     [[./diagrams/blue-green-deployment-weighted-dns.jpg]]
   
   If issues arise during the deployment, we achive rollback by
   updating the DNS record to shift traffic back to the blue
   environment. Although DNS routing is simple to implement for
   blue/green, the question is how quickly we can complete a
   rollback. *DNS TTL* determines how long clients cache query
   results. However, with older clients and potentially misbehaving
   clients in the wild, certain sessions may still be tied to the
   previous environment.
   
   For a full cutover, be sure to tune Auto Scaling policy to scale as
   expected and remember that the new ELB endpoint may need time to
   scale up as well.

** Swap the Auto Scaling Group Behind Elastic Load Balancer
   This technique uses ASG to manage the EC2 resources for our blue
   and green environments, scaling up or down based on actual demand.

   Auto Scaling integrates with ELB, so any new instances are
   automatically added to the load balancing pool if they pass the
   health checks governed by the load balancer.

   ELB tests the health of our registered EC2 instances with a simple
   ping or a more sophisticated connection attempt or request.

   We could have an ELB health check ploicy that pings port 80 every
   20 seconds and, after passing a threshold of 10 successful pings,
   reports the instance, reports the instance as being InService. If
   enough ping requests time out, then the instance is reported to be
   OutOfService.

   For scale-down activities, the load balancer removes the EC2
   instance from the pool and drains current connections before they
   terminate.

   - Diagram-3:
     [[./diagrams/blue-green-deployment-asg-state-1.jpg]]

   A blue group carries the production load while a green group is
   staged and deployed with the new code. When it's time to deploy, we
   simply attach the green group to the existing load balancer to
   introduce traffic to the new environment.

   - Diagram-4:
     [[./diagrams/blue-green-deployment-asg-state-2.jpg]]

   As we scale up the green Auto Scaling group, we can take blue Auto
   Scaling group instances out of service by either terminating them
   by either terminating them or putting them in Standby
   state. Standby is a good option because if we need to roll back to
   the blue environment, we only have to put our blue server instances
   back in service and they are ready to go. As soon as the green
   group is scaled up without issues, we can decommission the blue
   group by adjusting the group size to zero. If we need to rollback,
   detach the load balancer from the gree group or reduce the group
   size of the green group to zero.

** Update Auto Scaling Group Launch Configurations
   Auto scaling groups have their own launch configurations. A launch
   configuration contains information like AMI ID, instance type, key
   pair, one or more security groups, and a block device mapping.

   We can associate only one launch configuraion with an ASG at a
   time, and it can't be modified after we create it.

   To change the launch configuration associated with an ASG, replace
   the existing launch configuration with a new one. After a new
   launch configuration is in place, any new instances that are
   launched use the new launch configuration parameters, but existing
   instances are not affected.

   When Auto Scaling removes instances (referred to as scaling in)
   from the group, the default termination policy is to remove
   instances with the oldest launch configuration. However we should
   know that if the Availability Zones were unbalanced to begin with,
   then Auto Scaling could remove an instance with a new launch
   configuration to balance the zones. *In such situations, we should
   have processes in place to compensate for this effect.*

   - Diagram-5:
     [[./diagrams/blue-green-deployment-launchconfig-state-1.jpg]]

   To deploy the new version of the application in the green
   environment, update the Auto Scaling group with the new launch
   configuration, and then scale the Auto Scaling group to twice its
   original size.
     
   - Diagram-6:
     [[./diagrams/blue-green-deployment-launchconfig-state-2.jpg]]

   Then, shrink the ASG back to the original size. By default,
   instances with the old launch configuration are removed first. We
   can also leverage a group's Standby state to temporarily remove
   instances from an Auto Scaling group. Having the instance in
   Standby state helps in quick rollbacks, if required. As soon as we
   are confident about the newly deployed version of the application,
   we can permanently remove instances in Standby state.
   
   - Diagram-7:
     [[./diagrams/blue-green-deployment-launchconfig-state-3.jpg]]

   To perform a rollback, update the Auto Scaling group with the old
   launch configuration. Then, do the preceding steps in reverse. Or
   if the instnaces are in standby stage, bring them online.

** Swap the environment of an Elastic BeanStalk Application
   To deploy an application using EB, upload an application version in
   the form of an application bundle (for example java, .war file or
   .zip file).

   EB provides several deployment policies that we can configure to
   use, ranging from policies that perform an in-place update on
   existing instances, to immutable deployment using a set of new
   instances. Because EB performs an in-place update when we update
   our application versions, our application may become unavailable to
   users for a short period of time.

   To avoid this downtime, we can deploy the new version of the
   application to a separate environment. The existing environment's
   configuration is copied and used to launch the green environment
   with the new version of the application. The new green environment
   will have its own URL. When it's time to promote the green
   environment to serve production traffic, we can use EB Swap
   environment URLs feature as explained here:
   http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.CNAMESwap.html

   - Diagram-8:
     [[./diagrams/blue-green-deployment-eb-state-1.jpg]]
   
   EB, provides an environment URL when the application is up and
   running. Then, the green environment is spun up with its own
   environment URL. At this time, two environments are up and running,
   but only the blue environment is service production traffic.

   - Diagram-9:
     [[./diagrams/blue-green-deployment-eb-state-2.jpg]]

   To promote the green environment to serve production traffic, we go
   to the environment's dashboard in the EB console and choose *Swap
   Environment URL* from the *Actions* menu. EB performs a DNS switch,
   which typically takes a few minutes. When the DNS changes have
   propogated, we can terminate the blue environment. To perform a
   rollback, invoke *Swap Environment URL* again.

* References
  - https://www.thoughtworks.com/insights/blog/implementing-blue-green-deployments-aws
  - https://d0.awsstatic.com/whitepapers/AWS_Blue_Green_Deployments.pdf
  - http://www.spinnaker.io/
  - http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.CNAMESwap.html
  - https://aws.amazon.com/answers/web-applications/aws-web-app-deployment-java/
  - http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Java.html
  - http://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html
  - http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.CNAMESwap.html
  - https://aws.amazon.com/blogs/devops/deploying-a-spring-boot-application-on-aws-using-aws-elastic-beanstalk/
