#+Title: Network File System
#+Author: Yogesh Agrawal
#+Date: <2016-06-08 Wed>
#+Email: yogeshiiith@gmail.com

* Introduction
  This document describes about the network file system.

* NFS
  A Network File System (NFS) allows remote hosts to mount file
  systems over a network and interact with those file systems as
  though they are mounted locally.

* Communication Protocol
  NFS can use Transmission Control Protocol (TCP) running over an IP
  network. NFS can also use the User Datagram Protocol (UDP) running
  over an IP network to provide stateless network connection between
  the client and server.

** UDP vs TCP
   Using NFS with UDP under normal conditions has less Protocol
   overhead than TCP which can translate into better performance on
   clean, non-congested networks. However, if the server goes down
   unexpectedly, UDP clients continue to saturate the network with
   requests for the server. For this reason TCP is preferred protocol
   when connecting to an NFS server.

   NFSv4 listens on the well known TCP port (2049).

   - Note :: TCP is the default transport protocol for NFS. UDP can be
             used compatibility purposes as needed, but it is not
             recommended for wide usage. All the RPC/NFS daemon have a
             '-p' command line option that can set the port, making
             firewall configuration easier.

** NFS Port
   In order for NFS to work with a default installation, IPTables with
   the default TCP port 2049 must be configured. Without proper
   IPTables configuration, NFS does not function properly.
* Required Services
  NFS relies on Remote Procedure Calls (RPC) between client and
  servers. RPC services under Linux are controlled by *portmap*
  service. To share or mount NFS file systems, the following services
  work together, depending on which version of NFS is implemented.

** nfs - (/sbin/service nfs start)
   starts the NFS server and the appropriate RPC processes to service
   requests for shared NFS file systems.

** nfslock - (/sbin/service nfslock start)
   It is a mandatory service that starts the appropriate RPC processes
   to allows NFS clients to lock files on the server.

** portmap
   It accepts port reservations from local RPC services. These ports
   are then made available so the corresponding remote RPC services
   access them. *portmap* responds to requests for RPC services and
   sets up connections to the requested RPC service.
* NFS Client Configuration
  NFS shares are mounted on the client side using the *mount*
  command.
  #+BEGIN_EXAMPLE
  mount -t <nfs-type> -o <options> <host>:</remote/export> </local/directory>
  #+END_EXAMPLE
  - <nfs-type> : nfs or nfs4
  - <options> : comma separated list of options
  - <host> : remote host
  - </remote/export> : remote directory being mounted
  - </local/directory> : local directory where the remote file system
    is to be mounted. 

** Mounting NFS File Systems using /etc/fstab
   To mount an NFS share from another machine is to add a line to the
   =/etc/fstab= file.
   #+BEGIN_EXAMPLE
   <server>:</remote/export> </local/directory> <nfs-type> <options> 0 0
   #+END_EXAMPLE
   #+BEGIN_EXAMPLE
   server:/usr/local/pub    /pub   nfs    rsize=8192,wsize=8192,timeo=14,intr
   #+END_EXAMPLE
   The mount point =/pub= must exist on the client machine before this
   command can be executed. After adding this line to =/etc/fstab= on
   the client system, type the command =mount /pub= at a shell prompt,
   and the mount point =/pub= is mounted from the server.
* NFS Mount Options
  There are various mount options that one can use depending upon the
  requirements. [[https://www.centos.org/docs/5/html/Deployment_Guide-en-US/s1-nfs-client-config-options.html][Refer]]
* Starting and Stopping NFS
  To run an NFS server, the portmap service must be running. To verify
  that *portmap* is active, type the following command as root:
  #+BEGIN_EXAMPLE
  /sbin/service portmap status
  #+END_EXAMPLE
  If the portmap service is running, then the nfs service can be
  started. To start an NFS server, as root type:
  #+BEGIN_EXAMPLE
  /sbin/service nfs start
  #+END_EXAMPLE
  Start nfslock service for both the client and server to function
  properly. If nfs is set to start at boot, please ensure that nfslock
  also starts.
  #+BEGIN_EXAMPLE
  /sbin/service nfslock start
  #+END_EXAMPLE

  To stop the server
  #+BEGIN_EXAMPLE
  /sbin/service nfs stop
  #+END_EXAMPLE

  Restarting the server is the most efficient way to make
  configuration changes take effect after editing the configuration
  file for NFS.
  #+BEGIN_EXAMPLE
  /sbin/service nfs restart  
  #+END_EXAMPLE

  The *condrestart* (conditional restart) option only start nfs if it
  is currently running. This option is useful for scripts, because it
  does not start the daemon if it is not running.
  #+BEGIN_EXAMPLE
  /sbin/service nfs condrestart
  #+END_EXAMPLE

  To reload the NFS server configuration file without restart the
  service, as root type:
  #+BEGIN_EXAMPLE
  /sbin/service nfs reload
  #+END_EXAMPLE
* Command Line Configuration
  =/etc/exports= file controls what directories the NFS server
  exports. Its format is as follows:
  #+BEGIN_EXAMPLE
  directory hostname(options)
  #+END_EXAMPLE
  #+BEGIN_EXAMPLE
  /misc/export     speedy.example.com(rw,sync)
  #+END_EXAMPLE
  This would allow users from speedy.example.com to mount
  =/misc/export= with the read/write permissions.

  Each time you change =/etc/exports= we must inform the NFS daemon of
  the change, or reload the configuration file with the following
  command
  #+BEGIN_EXAMPLE
  /sbin/service nfs reload
  #+END_EXAMPLE
* The exportfs command
  =/usr/sbin/exportfs= allows the root user to selectively export or
  unexport directories without restarting the NFS service. If no
  options are passed to the =/usr/sbin/exportfs= command, it displays
  a list of currently exported file systems. 
* Security Concerns
  Some important security and performance parameters while setting up
  nfs server.

** Port 1024 and higher
   Services started on port numbers less than 1024 must be started as
   root. Port number can be selected such that NFS service can be
   started by a user other than root.

** Sync write operations
   Server can be configured to not reply to requests before the
   changes made by the requests are written to the disk.

** Export only if mounted
   A directory to be exported only if it has been mounted.
** Root sqaushing
   By default, the user and group IDs of the root user are
   both 0. Root squashing maps the user ID 0 and the group ID 0 to the
   user and group IDs of anonymous so that root on the client does not
   have root privileges on the NFS server.

** User level access control
   NFS controls who can mount an exported file system based on the
   host making the mount request, not the user that actually uses the
   file system. Access control is not possible for users, other than
   through file and directory permissions. Once a file system is
   exported via NFS, any user on any remote host connected to the NFS
   server can access the shared data. 

   NFSv4 has the feature of providing user level ACLs.
** DNS compromised
   If an attacker gains control of the DNS server used by the system
   exporting the NFS file system, the system associated with a
   particular hostname or fully qualified domain name can be pointed
   to an unauthorized machine. At this point, the unauthorized machine
   is the system permitted to mount the NFS share, since no username
   or password information is exchanged to provide additional security
   for the NFS mount.
** File permissions
   Once the NFS file system is mounted read/write by a remote host,
   the only protection each shared file has is its permissions. If two
   users that share the same user ID value mount the same NFS file
   system, they can modify each others files. Additionally, anyone
   logged in as root on the client system can use the *su -* command
   to become a user who could access particular files via the NFS
   share.
